/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.BindingField;
import org.xtext.example.mydsl.myDsl.Int32Item;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.StringItem;
import org.xtext.example.mydsl.myDsl.Table;
import org.xtext.example.mydsl.myDsl.ViewModel;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.BINDING_FIELD:
				sequence_BindingField(context, (BindingField) semanticObject); 
				return; 
			case MyDslPackage.INT32_ITEM:
				sequence_Int32Item(context, (Int32Item) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.STRING_ITEM:
				sequence_StringItem(context, (StringItem) semanticObject); 
				return; 
			case MyDslPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			case MyDslPackage.VIEW_MODEL:
				sequence_ViewModel(context, (ViewModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BindingField returns BindingField
	 *
	 * Constraint:
	 *     (name=ID table=[Table|ID] item=[AbstructItem|ID])
	 */
	protected void sequence_BindingField(ISerializationContext context, BindingField semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BINDING_FIELD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BINDING_FIELD__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BINDING_FIELD__TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BINDING_FIELD__TABLE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BINDING_FIELD__ITEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BINDING_FIELD__ITEM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBindingFieldAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getBindingFieldAccess().getTableTableIDTerminalRuleCall_3_0_1(), semanticObject.eGet(MyDslPackage.Literals.BINDING_FIELD__TABLE, false));
		feeder.accept(grammarAccess.getBindingFieldAccess().getItemAbstructItemIDTerminalRuleCall_5_0_1(), semanticObject.eGet(MyDslPackage.Literals.BINDING_FIELD__ITEM, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstructItem returns Int32Item
	 *     Int32Item returns Int32Item
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Int32Item(ISerializationContext context, Int32Item semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ABSTRUCT_ITEM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ABSTRUCT_ITEM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInt32ItemAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     ((tables+=Table+ viewModels+=ViewModel+) | viewModels+=ViewModel+)?
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstructItem returns StringItem
	 *     StringItem returns StringItem
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_StringItem(ISerializationContext context, StringItem semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ABSTRUCT_ITEM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ABSTRUCT_ITEM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringItemAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Table returns Table
	 *
	 * Constraint:
	 *     (name=ID items+=AbstructItem*)
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ViewModel returns ViewModel
	 *
	 * Constraint:
	 *     (name=ID fields+=BindingField+)
	 */
	protected void sequence_ViewModel(ISerializationContext context, ViewModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
